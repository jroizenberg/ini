package main;

import helper.ConfigurationCalendarHelper;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zk.ui.event.Events;
import org.zkoss.zk.ui.event.ForwardEvent;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zul.Checkbox;
import org.zkoss.zul.Combobox;
import org.zkoss.zul.Comboitem;
import org.zkoss.zul.Timebox;
import org.zkoss.zul.api.Datebox;

import server.CalendarRemoteImpl;

import com.institucion.fm.calendar.model.UserCalendarResponse;

public abstract class GenericEvent extends GenericForwardComposer {

	private static final long serialVersionUID = -1222121410460754567L;

	private CalendarRemoteImpl calendarRemoteImpl = null;

	private Datebox fechaInicioDB;
	private Datebox fechaFinDB;
	private Timebox horaInicio;
	private Timebox horaFin;

	private Checkbox chkTodoElDia;
	private Checkbox chkMail;
	private Checkbox chkPopup;
	private Combobox causasCB;
	private Combobox avisoMailCB;
	private Combobox avisoPopupCB;
	
	private Combobox cycleCB;
	private Combobox contactCB;

	public void doAfterCompose(Component comp) throws Exception {
		super.doAfterCompose(comp);
		Sessions.getCurrent().removeAttribute(ConfigurationCalendarHelper.SESSION_CONTEXT_POPUP);
	}
	
	public void onClickCancel(ForwardEvent event) {
		event.getTarget().detach();
	}
	
	public void onClickChkAllDay(ForwardEvent event) throws Exception {
		controlChkAllDay();
	}

	public void onClickChkPopup(ForwardEvent event) throws Exception {
		if (chkPopup.isChecked()) {
			avisoPopupCB.setDisabled(false);
		} else {
			avisoPopupCB.setDisabled(true);
			avisoPopupCB.setValue("");
		}
	}
	
	public void onClickChkMail(ForwardEvent event) throws Exception {
		if (chkMail.isChecked()) {
			avisoMailCB.setDisabled(false);
		} else {
			avisoMailCB.setDisabled(true);
			avisoMailCB.setValue("");
		}
	}
	
	protected void disabledAll() {
		if (fechaInicioDB != null) 		fechaInicioDB.setDisabled(true);
		if (fechaFinDB != null)			fechaFinDB.setDisabled(true);
		if (horaInicio != null)			horaInicio.setDisabled(true);
		if (horaFin != null)			horaFin.setDisabled(true);
		if (chkTodoElDia != null)		chkTodoElDia.setDisabled(true);
		if (chkMail != null)			chkMail.setDisabled(true);
		if (chkPopup != null)			chkPopup.setDisabled(true);
		if (causasCB != null)   		causasCB.setDisabled(true);
		if (avisoMailCB != null)		avisoMailCB.setDisabled(true);
		if (avisoPopupCB != null)		avisoPopupCB.setDisabled(true);
		if (cycleCB != null)			cycleCB.setDisabled(true);
		if (contactCB != null)			contactCB.setDisabled(true);
	}
	
	protected CalendarRemoteImpl getCalendarRemoteImpl() {
		if (calendarRemoteImpl == null) {
			calendarRemoteImpl = new CalendarRemoteImpl();
		}
		return calendarRemoteImpl;
	}

	protected void setCalendarRemoteImpl(CalendarRemoteImpl calendarRemoteImpl) {
		this.calendarRemoteImpl = calendarRemoteImpl;
	}

	protected void fillAvisoCB() throws Exception {
		for (Comboitem comboitem : createAvisos()) {
			avisoMailCB.appendChild(comboitem);
		}
		for (Comboitem comboitem : createAvisos()) {
			avisoPopupCB.appendChild(comboitem);
		}
	}
	
	protected void fillContactsCB() throws Exception {
		
	}
	
	protected void fillCyclesCB(String userName)  throws Exception {
		for (Comboitem comboitem : createCycles(userName)) {
			cycleCB.appendChild(comboitem);
		}
		
		cycleCB.addEventListener(Events.ON_CHANGE, new EventListener() {
			public void onEvent(Event evt) {
				if(contactCB != null)
					fillContacts();
			}
		});
	}
	
	protected void selectInCombobox(Combobox cb, String value) {
		if (value != null) {
			for (Object object : cb.getItems()) {
				Comboitem ci = (Comboitem) object;
				if (value.equalsIgnoreCase(ci.getLabel())) {
					ci.getAttribute("alarm");
					cb.setSelectedItem(ci);
					break;
				}
			}
		}
	}
	
	protected void selectInCombobox(Combobox cb, Long value) {
		if (value != null) {
			for (Object object : cb.getItems()) {
				Comboitem ci = (Comboitem) object;
				Long id = (Long)ci.getValue();
				if (value.longValue() == id.longValue()) {
					ci.getAttribute("alarm");
					cb.setSelectedItem(ci);
					break;
				}
			}
		}
		
	}

	protected void selectInComboboxById(Combobox cb, Long idValue) {
		if (idValue != null) {
			for (Object object : cb.getItems()) {
				Comboitem ci = (Comboitem) object;
				if (idValue.longValue() == ((Long)ci.getValue()).longValue()) {
					ci.getAttribute("alarm");
					cb.setSelectedItem(ci);
					break;
				}
			}
		}
	}

	protected void controlChkMailAndPopup() {
		if (getChkMail().isChecked()) {
			getAvisoMailCB().setDisabled(false);
		} else {
			getAvisoMailCB().setDisabled(true);
		}
		if (getChkPopup().isChecked()) {
			getAvisoPopupCB().setDisabled(false);
		} else {
			getAvisoPopupCB().setDisabled(true);
		}
	}
	
	protected void controlChkAllDay() {
		if (getChkTodoElDia().isChecked()) {
			getFechaInicioDB().setDisabled(true);
			getFechaFinDB().setDisabled(true);
			getHoraInicio().setDisabled(true);
			getHoraFin().setDisabled(true);
		} else {
			getFechaInicioDB().setDisabled(false);
			getFechaFinDB().setDisabled(false);
			getHoraInicio().setDisabled(false);
			getHoraFin().setDisabled(false);
			getFechaFinDB().setValue(getFechaInicioDB().getValue());
		}
	}

	protected Datebox getFechaInicioDB() {
		return fechaInicioDB;
	}

	protected void setFechaInicioDB(Datebox fechaInicioDB) {
		this.fechaInicioDB = fechaInicioDB;
	}

	protected Datebox getFechaFinDB() {
		return fechaFinDB;
	}

	protected void setFechaFinDB(Datebox fechaFinDB) {
		this.fechaFinDB = fechaFinDB;
	}

	protected Timebox getHoraInicio() {
		return horaInicio;
	}

	protected void setHoraInicio(Timebox horaInicio) {
		this.horaInicio = horaInicio;
	}

	protected Timebox getHoraFin() {
		return horaFin;
	}

	protected void setHoraFin(Timebox horaFin) {
		this.horaFin = horaFin;
	}

	protected Checkbox getChkTodoElDia() {
		return chkTodoElDia;
	}

	protected void setChkTodoElDia(Checkbox chkTodoElDia) {
		this.chkTodoElDia = chkTodoElDia;
	}

	protected Checkbox getChkMail() {
		return chkMail;
	}

	protected void setChkMail(Checkbox chkMail) {
		this.chkMail = chkMail;
	}

	protected Checkbox getChkPopup() {
		return chkPopup;
	}

	protected void setChkPopup(Checkbox chkPopup) {
		this.chkPopup = chkPopup;
	}

	protected Combobox getCausasCB() {
		return causasCB;
	}

	protected void setCausasCB(Combobox causasCB) {
		this.causasCB = causasCB;
	}

	protected Combobox getAvisoMailCB() {
		return avisoMailCB;
	}

	protected void setAvisoMailCB(Combobox avisoMailCB) {
		this.avisoMailCB = avisoMailCB;
	}
	
	protected Combobox getCycleCB() {
		return cycleCB;
	}

	protected void setCycleCB(Combobox cycleCB) {
		this.cycleCB = cycleCB;
	}

	protected Combobox getContactCB() {
		return contactCB;
	}

	protected void setContactCB(Combobox contactCB) {
		this.contactCB = contactCB;
	}

	protected Combobox getAvisoPopupCB() {
		return avisoPopupCB;
	}

	protected void setAvisoPopupCB(Combobox avisoPopupCB) {
		this.avisoPopupCB = avisoPopupCB;
	}
	
	private List<Comboitem> createAvisos() throws Exception {
//		Map<AlarmFrequency, String> alarmFrequencies = getCalendarRemoteImpl().retrieveAlarmFrequencies();
//		List<Comboitem> avisos = new ArrayList<Comboitem>();
//		Comboitem item = null;
//		for (AlarmFrequency alarmFrequency : alarmFrequencies.keySet()) {
//			item = new Comboitem(alarmFrequencies.get(alarmFrequency));
//			item.setValue(Long.valueOf(alarmFrequency.toInt()));
//			item.setAttribute("alarm", alarmFrequency);
//			avisos.add(item);
//		}
//		return avisos;
		return null;
	}
	
	private List<Comboitem> createCycles(String userName) throws Exception {
//		List<CycleModel> cyclesModel = getCalendarRemoteImpl().retrieveCycles(userName);
//		List<Comboitem> result = new ArrayList<Comboitem>();
//		Iterator<CycleModel> ite = cyclesModel.iterator();
//		Comboitem item = null;
//		while (ite.hasNext()) {
//			CycleModel cyc = (CycleModel) ite.next();
//			item = new Comboitem(cyc.getDescription());
//			item.setValue(cyc.getId());
//			item.setAttribute("object", cyc);
//			result.add(item);
//		}
//		return result;
		return null;
	}
	
	protected void fillContacts() {
		UserCalendarResponse userCalendarResponse = (UserCalendarResponse) Sessions.getCurrent().getAttribute(ConfigurationCalendarHelper.SESSION_USER);
		try {
			if ("".equalsIgnoreCase(cycleCB.getValue())) {
				contactCB.setDisabled(true);
			} else {
				Long cycleId = (Long)cycleCB.getSelectedItem().getValue();
				List<ContactModel> contacts = getCalendarRemoteImpl().retrieveContactbyCicle(userCalendarResponse.getPrincipalUser().getUserName(), cycleId, ConfigurationCalendarHelper.getLocale());

				List<Comboitem> result = new ArrayList<Comboitem>();
				Iterator<ContactModel> ite = contacts.iterator();
				Comboitem item = null;
				while (ite.hasNext()) {
					ContactModel contact = (ContactModel) ite.next();
					if(contact.getContactDescription() != null){
						if(contact.getContactDescription().length() > 60 ){
							String nuevaDes=contact.getContactDescription().substring(0, 60);
							item = new Comboitem(nuevaDes +"...");		
						}else{
							item = new Comboitem(contact.getContactDescription());
						}
					}else{
						item = new Comboitem("");
					}
					
					item.setValue(contact.getId());
					item.setAttribute("object", contact);
					result.add(item);
				}
				for (Comboitem comboitem : result) {
					contactCB.appendChild(comboitem);
				}
				contactCB.setDisabled(false);
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
	


}
