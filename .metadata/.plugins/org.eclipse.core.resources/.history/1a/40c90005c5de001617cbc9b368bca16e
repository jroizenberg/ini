package main;

import helper.ColorViewHelper;
import helper.ConfigurationCalendarHelper;
import helper.MessageExceptionHelper;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import model.FMSimpleCalendarEvent;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.zkoss.calendar.Calendars;
import org.zkoss.calendar.event.CalendarsEvent;
import org.zkoss.calendar.impl.SimpleCalendarEvent;
import org.zkoss.calendar.impl.SimpleCalendarModel;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.SuspendNotAllowedException;
import org.zkoss.zk.ui.event.ForwardEvent;
import org.zkoss.zk.ui.util.GenericForwardComposer;
import org.zkoss.zkplus.databind.AnnotateDataBinder;
import org.zkoss.zul.Calendar;
import org.zkoss.zul.East;
import org.zkoss.zul.Listbox;
import org.zkoss.zul.Listitem;
import org.zkoss.zul.North;
import org.zkoss.zul.West;
import org.zkoss.zul.Window;

import server.CalendarRemoteImpl;
import server.SimpleCalendarEventFactory;

import com.institucion.fm.calendar.model.UserCalendarResponse;

import delegates.HelloZKDelegate;

public class HelloZK extends GenericForwardComposer implements HelloZKDelegate {

	private static final long serialVersionUID = 4471408649818663412L;
	private static Log log = LogFactory.getLog(HelloZK.class);

	private static final String USER_PARAM = "user";
	private static final String PASSWORD_PARAM = "password";
	
	private CalendarRemoteImpl calendarRemoteImpl = null;
	public static final String IS_EDIT = "isEdit";
	public static final String CALENDARS_EVENT = "calendarsEvent";
	private UserCalendarResponse userCalendarResponse;
	private Calendars calendar;
	private Calendar simpleCalendar;
	private SimpleCalendarModel calendarModel;
	private AnnotateDataBinder usersBinder;
	private List<UserView>usersViewList;
	private Listbox lbUsersList;
	private West west;
	private East east;
	private North listaApms;
	Window window = null;
	String userName = null;

	@Override
    public void doAfterCompose(Component comp) throws Exception {
        super.doAfterCompose(comp);
        try {
        	
            userName = ((String[]) this.param.get(USER_PARAM))[0];
            String password = ((String[]) this.param.get(PASSWORD_PARAM))[0];
            userCalendarResponse = getCalendarRemoteImpl().getUserInfo(userName);
            if (userCalendarResponse.isAPM()) {
            	west.setWidth("20%");
            	listaApms.setVisible(false);
            	east.setWidth("80%");

            	Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SESSION_IS_APM, Boolean.TRUE);
            } else {
            	west.setWidth("20%");
            	east.setWidth("80%");
            	Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SESSION_IS_APM, Boolean.FALSE);
            }
    		calendarModel = new SimpleCalendarModel();
    		if (calendar != null) {
    			calendar.setModel(this.calendarModel);
    		}
    		
            if (userCalendarResponse.isAPM()) {
            	
                CalendarRemoteImpl calendarImpl = new CalendarRemoteImpl();
                
                List<AppointmentModel> list = calendarImpl.retrieveAppointments(userCalendarResponse.getPrincipalUser().getUserName(), calendar.getBeginDate(), calendar.getEndDate());
                if(list != null){
                	for (AppointmentModel appointmentModel : list) {
                		if(!appointmentModel.isAllDay()){
                			if(appointmentModel.getStartDate().getHours() < 7 || appointmentModel.getEndDate().getHours() > 22){
                				
                			}else{
                				FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userName);
                				if(appointmentModel.isHasAssociatedAction())
                  					fmSce.changeFMColorsAppointmentVisited();
                  				else
                  					fmSce.changeFMColors();
        		      			
                    			((SimpleCalendarModel)calendar.getModel()).add(fmSce);		
                			}
                		}else{
                			FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userName);
                			if(appointmentModel.isHasAssociatedAction())
              					fmSce.changeFMColorsAppointmentVisited();
              				else
              					fmSce.changeFMColors();
                			((SimpleCalendarModel)calendar.getModel()).add(fmSce);
                		}
            			
            		}	
                }
        		Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SESSION_USER, userCalendarResponse);
                fillUsersBinder(comp);

            }else{
            	fillUsersBinder(comp);
            	
            	UserView userView = new UserView();
        		userView.setId(userCalendarResponse.getPrincipalUser().getIdUser().toString());
        		userView.setName(userCalendarResponse.getPrincipalUser().getFullName());
        		userView.setUserName(userCalendarResponse.getPrincipalUser().getUserName());
        		userView.setSelected(true);
            	
            	ColorViewHelper.getNextColor(1, userView);
	
            	if(usersViewList != null)
					usersViewList.add(userView);
				else{
					usersViewList = new ArrayList();;
					usersViewList.add(userView);
				}
            	updateContactsGrid2();
	        	onrefreshCalendar();
            }
            // Limita los horarios de la agenda segun configuracion 
            calendar.setBeginTime(7);
            calendar.setEndTime(22);
            calendar.setTimeslots(6);
    		Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SESSION_USER, userCalendarResponse);
    		Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SERSSION_CALENDAR, calendar);
        
        } catch (Exception ex) {
        	ex.printStackTrace();
			log.error("Mensaje: " + ex.getMessage() + "StackTrace: " + ex.getStackTrace());
			MessageExceptionHelper.mostrarMensaje(ex);
			
			if(calendar != null)
        		calendar.setVisible(false);
			
			if(simpleCalendar != null)
				simpleCalendar.setVisible(false);
			return;
        }
    }
	
	public int diasDelMes(int mes, int anio){

		switch(mes){
			case 0:  // Enero
			case 2:  // Marzo
			case 4:  // Mayo
			case 6:  // Julio
			case 7:  // Agosto
			case 9:  // Octubre
			case 11: // Diciembre
			return 31;
			case 3:  // Abril
			case 5:  // Junio
			case 8:  // Septiembre
			case 10: // Noviembre
			return 30;
			case 1:  // Febrero
			if ( ((anio%100 == 0) && (anio%400 == 0)) ||
			((anio%100 != 0) && (anio%  4 == 0))   )
			return 29;  // Año Bisiesto
			else
			return 28;
			default:
			throw new java.lang.IllegalArgumentException( "El mes debe estar entre 0 y 11");
		}
	}
	
	public void onEventCreate$calendar (CalendarsEvent event) {
		Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.ES_ALL_DAY, null);	

		Window window2 = null;
		CalendarsEvent calendarEvent = event;
		Sessions.getCurrent().setAttribute(IS_EDIT, Boolean.FALSE);
		Sessions.getCurrent().setAttribute(CALENDARS_EVENT, calendarEvent);
		window2 = (Window) Sessions.getCurrent().getAttribute(ConfigurationCalendarHelper.SESSION_CONTEXT_POPUP);
		if (window2 == null) {
			if(window != null){
				window.detach();
			}
			window = (Window)Executions.createComponents("contextMenu.zul", null, null);
			window.setStyle("background:#990000 !important;");
			window2= window;
			Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SESSION_CONTEXT_POPUP, window2);	
		}
		
		if(event.getBeginDate().getHours() == event.getEndDate().getHours())
			Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.ES_ALL_DAY, true);	

		window2.setLeft("" + calendarEvent.getX() + "px");
		window2.setTop("" + calendarEvent.getY() + "px");
		window2.setStyle("background:#990000 !important;");
		try {
			window2.doPopup();
			window= window2;
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	public void onEventUpdate$calendar (CalendarsEvent event) throws Exception {
				
		long timeNow;
		long roundedTime;
		java.util.Calendar cal = java.util.Calendar.getInstance();
		
		try {
			CalendarsEvent clickEvent = event;
			SimpleCalendarModel scm = (SimpleCalendarModel)calendar.getModel();
			Date newBeginDate = clickEvent.getBeginDate();
			timeNow = newBeginDate.getTime();
	        roundedTime = timeNow - (timeNow % 1000);
	        cal.setTimeInMillis(roundedTime);

			FMSimpleCalendarEvent dataToUpdate = (FMSimpleCalendarEvent)event.getCalendarEvent();
			dataToUpdate.setBeginDate(cal.getTime());
			Date newEndDate = clickEvent.getEndDate();
			timeNow = newEndDate.getTime();
			roundedTime = timeNow - (timeNow % 1000);
			cal.setTimeInMillis(roundedTime);
			dataToUpdate.setEndDate(cal.getTime());
			
//			switch (dataToUpdate.getType()) {
//				case ABSENCE:
//					getCalendarRemoteImpl().modifyAbsence(userCalendarResponse.getPrincipalUser().getUserName(), dataToUpdate);
//					break;
//				case ACTIONAPPOINTMENT:
//					getCalendarRemoteImpl().modifyActionAppointment(userCalendarResponse.getPrincipalUser().getUserName(), dataToUpdate);
//					break;
//				case COMPLEMENTARYACTION:
//					getCalendarRemoteImpl().modifyComplementaryAction(userCalendarResponse.getPrincipalUser().getUserName(), dataToUpdate);
//					break;
//			}
			scm.update(dataToUpdate);
		} catch (Exception ex) {
			log.error("Mensaje: " + ex.getMessage() + "StackTrace: " + ex.getStackTrace());
			MessageExceptionHelper.mostrarMensaje(ex);
			return;
		}

	}
	
	public void onEventEdit$calendar (CalendarsEvent event) {
		Window window = null; 
		CalendarsEvent calendarsEvent = event;
		Sessions.getCurrent().setAttribute("calendarsEvent", calendarsEvent);
		Sessions.getCurrent().setAttribute(IS_EDIT, Boolean.TRUE);
		FMSimpleCalendarEvent ce = (FMSimpleCalendarEvent) calendarsEvent.getCalendarEvent();
		
		try {
//			if(ce.getType() != null){
//				switch (ce.getType()) {
//					case ABSENCE:
//						window = (Window)Executions.createComponents("newNoPromotional.zul", null, null);	
//						window.doHighlighted();
//						break;
//					case ACTIONAPPOINTMENT:
//						window = (Window)Executions.createComponents("newClientDate.zul", null, null);	
//						window.doHighlighted();
//						break;
//					case COMPLEMENTARYACTION:
//						window = (Window)Executions.createComponents("newEvent.zul", null, null);	
//						window.doHighlighted();
//						break;
//				}				
//			}
		} catch (SuspendNotAllowedException e) {
			e.printStackTrace();
		}
	}
	
	public void onUpdateView(ForwardEvent event) {
        String text = String.valueOf(event.getData());
        int days = "Dia".equals(text) ? 1: "5 Days".equals(text) ? 5: "Semana".equals(text) ? 7: 0;
        if (days > 0) {
                calendar.setMold("default");
                calendar.setDays(days);
        } else calendar.setMold("month");
        
        onrefreshCalendar();
        
	}
	
	
	private void onrefreshCalendar(){

		((SimpleCalendarModel)calendar.getModel()).clear();
		if(userCalendarResponse != null && userCalendarResponse.isAPM()){
			try{
		        CalendarRemoteImpl calendarImpl = new CalendarRemoteImpl();
		
//		        List<AppointmentModel> list = calendarImpl.retrieveAppointments(userCalendarResponse.getPrincipalUser().getUserName(), calendar.getBeginDate(), calendar.getEndDate());
//		        if(list != null){
//		        	for (AppointmentModel appointmentModel : list) {
//		        		if(!appointmentModel.isAllDay()){
//		        			if(appointmentModel.getStartDate().getHours() < 7 || appointmentModel.getEndDate().getHours() > 22){
//		        				
//		        			}else{
//		        				FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userName);
//		        				
//		        				if(calendar.getMold() != null && calendar.getMold().equalsIgnoreCase("month")){
//			        				fmSce.changeFMColors();
//		        				}else{
//			        				if(appointmentModel.isHasAssociatedAction())
//				        				fmSce.changeFMColorsAppointmentVisited();
//				        			else
//				        				fmSce.changeFMColors();
//		        				}
//			        			
//		            			((SimpleCalendarModel)calendar.getModel()).add(fmSce);		
//		        			}
//		        		}else{
//		        			FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userName);
//	        				if(calendar.getMold() != null && calendar.getMold().equalsIgnoreCase("month")){
//		        				fmSce.changeFMColors();
//	        				}else{
//		        				if(appointmentModel.isHasAssociatedAction())
//			        				fmSce.changeFMColorsAppointmentVisited();
//			        			else
//			        				fmSce.changeFMColors();
//	        				}
//		        			((SimpleCalendarModel)calendar.getModel()).add(fmSce);
//		        		}
//		    		}	
//		        }
				Sessions.getCurrent().setAttribute(ConfigurationCalendarHelper.SERSSION_CALENDAR, calendar);
				
				simpleCalendar.setValue(calendar.getCurrentDate());
				
			}catch(Exception e){
				
			}		
		}else{
			
			CalendarRemoteImpl calendarImpl = new CalendarRemoteImpl();
			try {
				((SimpleCalendarModel)calendar.getModel()).clear();
				
				if(usersViewList != null){
					for (UserView userView : usersViewList) {
						
						if(userView.isSelected()){
//							List<AppointmentModel> appointments = calendarImpl.retrieveAppointments(userView.getUserName(), calendar.getBeginDate(), calendar.getEndDate());
//				     		for (AppointmentModel appointmentModel : appointments) {
//				     			
//				     	 		if(!appointmentModel.isAllDay()){
//				     	 			if(appointmentModel.getStartDate().getHours() < 7 || appointmentModel.getEndDate().getHours() > 22){
//				          				
//				          			}else{
//				          				FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userCalendarResponse.getPrincipalUser().getUserName());
//				        				if(calendar.getMold() != null && calendar.getMold().equalsIgnoreCase("month")){
//					        				fmSce.changeFMColors(userView);
//				        				}else{
//				        					if(appointmentModel.isHasAssociatedAction())
//					          					fmSce.changeFMColorsAppointmentVisited(userView);
//					          				else
//					          					fmSce.changeFMColors(userView);
//				        				}
//				    	    			fmSce.setLocked(true);
//				    	    			((SimpleCalendarModel)calendar.getModel()).add(fmSce);
//				    	    		}
//					      		}else{
//					      			FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userCalendarResponse.getPrincipalUser().getUserName());
//			        				if(calendar.getMold() != null && calendar.getMold().equalsIgnoreCase("month")){
//				        				fmSce.changeFMColors(userView);
//			        				}else{
//			        					if(appointmentModel.isHasAssociatedAction())
//				          					fmSce.changeFMColorsAppointmentVisited(userView);
//				          				else
//				          					fmSce.changeFMColors(userView);
//			        				}
//					    			fmSce.setLocked(true);
//					    			((SimpleCalendarModel)calendar.getModel()).add(fmSce);      			
//					      		}
//				    		}
						}
					}
				}
				simpleCalendar.setValue(calendar.getCurrentDate());

	        } catch (Exception ex) {
				log.error("Mensaje: " + ex.getMessage() + "StackTrace: " + ex.getStackTrace());
				return;
	        }
		}
	}
		
	
	public void onMoveDate(ForwardEvent event) {
        if ("arrow-left".equals(event.getData()))
                calendar.previousPage();
        else calendar.nextPage(); 
        
        onrefreshCalendar();

	}
	
	public void onClickNoPromotional(ForwardEvent event) {
		Window window = (Window)Executions.createComponents("newNoPromotional.zul", null, null);
		try {
			window.doHighlighted();
		} catch (SuspendNotAllowedException e) {
			e.printStackTrace();
		}
	}
	
	public void onClickApmPopupGrid(ForwardEvent event) {
		Window window = (Window)Executions.createComponents("apmPopupGrid.zul", null, null);
		Sessions.getCurrent().setAttribute("helloZKComposer", this);
		try {
			window.doHighlighted();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Click del botón Checkbox del Calendario ubicado del lado izquierdo,
	 * solo visible para el perfil Supervisor.
	 * 
	 * @param event
	 */
	public void onClickChkAll(ForwardEvent event) {
		Iterator<Listitem> usersIterator = lbUsersList.getSelectedItems().iterator();
		while (usersIterator.hasNext()) {
			UserView userView = (UserView) usersIterator.next().getValue();
			userView.setSelected(true);
		}
	}
	
	public void onClick$btn() {
		calendar.setReadonly(false);
		
		SimpleCalendarEvent sce = new SimpleCalendarEvent();
		sce.setBeginDate(new Date());
		sce.setEndDate(new Date());
		 
		sce.setContentColor("red");
		sce.setHeaderColor("red");
		 
		sce.setContent("This is the content of the event");
		sce.setTitle("This is the title of the event");
		 
		sce.setLocked(false);
		
		calendar.addDayEvent(sce);
	}
	
	public void updateContactsGrid2() {
		
		// Se debe verificar de Nunca eliminar el usuario supervisor
		usersBinder.bindBean("usersViewList", usersViewList);
		usersBinder.loadAll();
	}
	
	
	public void updateContactsGrid(List<UserView> users) {
		
		// Se debe verificar de Nunca eliminar el usuario supervisor
		List useers= new ArrayList();
		if(usersViewList != null){
			for (UserView userView : usersViewList) {
				if(userView.getUserName().equalsIgnoreCase(userName)){
					useers.add(userView);
				}
			}
		}
		if(users != null)
			useers.addAll(users);
//		else
//			users= new ArrayList();
		
		usersViewList.clear();
		usersViewList.addAll(useers);
		usersBinder.bindBean("usersViewList", usersViewList);
		usersBinder.loadAll();
	}
	
	
	public void onClickUpdateDatesFromContactsGrid(ForwardEvent event) throws Exception {
		CalendarRemoteImpl calendarImpl = new CalendarRemoteImpl();
		try {
			((SimpleCalendarModel)calendar.getModel()).clear();
			Iterator<Listitem> usersIterator = lbUsersList.getSelectedItems().iterator();
			
			while (usersIterator.hasNext()) {
				UserView userView = (UserView) usersIterator.next().getValue();
//				List<AppointmentModel> appointments = calendarImpl.retrieveAppointments(userView.getUserName(), calendar.getBeginDate(), calendar.getEndDate());
//	     		for (AppointmentModel appointmentModel : appointments) {
//	     			
//	     	 		if(!appointmentModel.isAllDay()){
//	     	 			if(appointmentModel.getStartDate().getHours() < 7 || appointmentModel.getEndDate().getHours() > 22){
//	          				
//	          			}else{
//	          				FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userCalendarResponse.getPrincipalUser().getUserName());
//	          				if(appointmentModel.isHasAssociatedAction())
//	          					fmSce.changeFMColorsAppointmentVisited(userView);
//	          				else
//	          					fmSce.changeFMColors(userView);
//
//	          				fmSce.setLocked(true);
//	    	    			((SimpleCalendarModel)calendar.getModel()).add(fmSce);
//	    	    		}
//		      		}else{
//		      			FMSimpleCalendarEvent fmSce = SimpleCalendarEventFactory.toFMSimpleCalendarEvent(appointmentModel, userCalendarResponse.getPrincipalUser().getUserName());
//		      			if(appointmentModel.isHasAssociatedAction())
//          					fmSce.changeFMColorsAppointmentVisited(userView);
//          				else
//          					fmSce.changeFMColors(userView);
//		      			
//		      			fmSce.setLocked(true);
//		    			((SimpleCalendarModel)calendar.getModel()).add(fmSce);      			
//		      		}
//	    		}
			}
        } catch (Exception ex) {
			log.error("Mensaje: " + ex.getMessage() + "StackTrace: " + ex.getStackTrace());
			MessageExceptionHelper.mostrarMensaje(ex);
			return;
        }
	}
	
	
	
	
	public void onClickDay(ForwardEvent event) {
		calendar.setCurrentDate(simpleCalendar.getValue());
		onrefreshCalendar();
	}

	private void fillUsersBinder(Component comp) {
		usersViewList = new ArrayList<UserView>();
		usersBinder = new AnnotateDataBinder(comp);
		usersBinder.bindBean("usersViewList", usersViewList);
		usersBinder.loadAll();

	}

	private CalendarRemoteImpl getCalendarRemoteImpl() {
		if (calendarRemoteImpl == null) {
			calendarRemoteImpl = new CalendarRemoteImpl();
		}
		return calendarRemoteImpl;
	}

}
